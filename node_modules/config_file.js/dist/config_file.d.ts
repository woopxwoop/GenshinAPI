import { FlexJsonElement, JsonOptions } from "./json_utils";
import { JsonManager, PathResolver } from "./json_manager";
interface IConfigFile<O extends JsonOptions> extends JsonManager<O> {
    readonly filePath: string | null;
    readonly defaultConfig: FlexJsonElement<O>;
    get(...keys: (string | number)[]): ConfigPathResolver<O>;
    map<T>(callback: (entry: ConfigPathResolver<O>) => T): T[];
    find(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O> | undefined;
    filter(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O>[];
    forEach(callback: (entry: ConfigPathResolver<O>) => void): void;
    saveSync(compact: boolean): ConfigFile<O>;
    loadSync(): ConfigFile<O>;
    save(compact: boolean): Promise<ConfigFile<O>>;
    load(): Promise<ConfigFile<O>>;
    resetData(): ConfigFile<O>;
}
export declare class ConfigFile<O extends JsonOptions> extends JsonManager<O> implements IConfigFile<O> {
    readonly filePath: string | null;
    readonly defaultConfig: FlexJsonElement<O>;
    constructor(filePath: string | null, jsonOptions: O, defaultConfig: FlexJsonElement<O>, readonly?: boolean, fastMode?: boolean, route?: (string | number)[]);
    get(...keys: (string | number)[]): ConfigPathResolver<O>;
    map<T>(callback: (entry: ConfigPathResolver<O>) => T): T[];
    find(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O> | undefined;
    filter(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O>[];
    forEach(callback: (entry: ConfigPathResolver<O>) => void): void;
    saveSync(compact?: boolean): this;
    loadSync(): this;
    save(compact?: boolean): Promise<this>;
    load(): Promise<this>;
    resetData(): this;
}
declare class ConfigPathResolver<O extends JsonOptions> extends PathResolver<O> implements IConfigFile<O> {
    readonly configFile: ConfigFile<O>;
    readonly filePath: string | null;
    readonly defaultConfig: FlexJsonElement<O>;
    constructor(configFile: ConfigFile<O>, route: (string | number)[], currentData: FlexJsonElement<O> | undefined);
    get(...keys: (string | number)[]): ConfigPathResolver<O>;
    map<T>(callback: (entry: ConfigPathResolver<O>) => T): T[];
    find(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O> | undefined;
    filter(predicate: (entry: ConfigPathResolver<O>) => boolean): ConfigPathResolver<O>[];
    forEach(callback: (entry: ConfigPathResolver<O>) => void): void;
    saveSync(compact?: boolean): ConfigFile<O>;
    loadSync(): ConfigFile<O>;
    save(compact?: boolean): Promise<ConfigFile<O>>;
    load(): Promise<ConfigFile<O>>;
    resetData(): ConfigFile<O>;
}
export {};
