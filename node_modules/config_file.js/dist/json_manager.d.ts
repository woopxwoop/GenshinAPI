import { FlexJsonArray, FlexJsonElement, FlexJsonObject, JsonOptions } from "./json_utils";
export declare class JsonManager<O extends JsonOptions> {
    private _data;
    get data(): FlexJsonElement<O>;
    set data(value: FlexJsonElement<O>);
    readonly jsonOptions: O;
    readonly readonly: boolean;
    readonly fastMode: boolean;
    readonly route: (string | number)[];
    protected _currentData: FlexJsonElement<O> | undefined;
    constructor(jsonOptions: O, data: FlexJsonElement<O>, readonly?: boolean, fastMode?: boolean, route?: (string | number)[]);
    set(key: string | number, value: FlexJsonElement<O>): this;
    add(value: FlexJsonElement<O>): this;
    getValue(key?: string | number | undefined, disableFastMode?: boolean): FlexJsonElement<O> | undefined;
    getAs<T extends FlexJsonElement<O> | undefined>(key?: string | number | undefined): T;
    getAsNumber(key?: string | number | undefined): number;
    getAsString(key?: string | number | undefined): string;
    getAsBoolean(key?: string | number | undefined): boolean;
    getAsBigint(key?: string | number | undefined): O["allowBigint"] extends true ? bigint : never;
    getAsJsonObject(key?: string | number | undefined): FlexJsonObject<O>;
    getAsJsonArray(key?: string | number | undefined): FlexJsonArray<O>;
    getAsNullableNumber(key?: string | number | undefined): number | null;
    getAsNullableString(key?: string | number | undefined): string | null;
    getAsNullableBoolean(key?: string | number | undefined): boolean | null;
    getAsNullableBigint(key?: string | number | undefined): O["allowBigint"] extends true ? bigint | null : never;
    getAsNullableJsonObject(key?: string | number | undefined): FlexJsonObject<O> | null;
    getAsNullableJsonArray(key?: string | number | undefined): FlexJsonArray<O> | null;
    get(...keys: (string | number)[]): PathResolver<O>;
    map<T>(callback: (entry: PathResolver<O>) => T): T[];
    find(predicate: (entry: PathResolver<O>) => boolean): PathResolver<O> | undefined;
    filter(predicate: (entry: PathResolver<O>) => boolean): PathResolver<O>[];
    forEach(callback: (entry: PathResolver<O>) => void): void;
    detach(): JsonManager<O>;
    asObject(): this;
    asArray(): this;
    has(...keys: (string | number)[]): boolean;
    exists(): boolean;
    resetPath(): this;
    private setHere;
    /**
     * @param route
     * @returns Returns null if it is not an object and undefined if it does not exist.
     */
    private getObjectByRoute;
    /**
     * @param route
     * @param arrayAtLastPath Whether to create the last path as array. If null provided, this doesn't create any object at the last path.
     * @returns Whether there have been any changes.
     */
    private createPath;
    private _createPath;
}
export declare class PathResolver<O extends JsonOptions> extends JsonManager<O> {
    readonly manager: JsonManager<O>;
    constructor(manager: JsonManager<O>, route: (string | number)[], currentData: FlexJsonElement<O> | undefined);
    get data(): FlexJsonElement<O>;
    set data(value: FlexJsonElement<O>);
    get(...keys: (string | number)[]): PathResolver<O>;
}
export declare class EditReadonlyError extends Error {
}
export declare class InvalidTypeError extends Error {
    constructor(value: unknown);
}
