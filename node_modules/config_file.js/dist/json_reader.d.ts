import { FlexJsonArray, FlexJsonElement, FlexJsonObject, JsonOptions } from "./json_utils";
/** Readonly but super fast */
export declare class JsonReader<O extends JsonOptions> {
    readonly jsonOptions: O;
    readonly data: FlexJsonElement<O> | undefined;
    constructor(jsonOptions: O, data: FlexJsonElement<O> | undefined);
    /** @returns undefined if it does not exist */
    getValue(...key: (string | number)[]): FlexJsonElement<O> | undefined;
    get(...keys: (string | number)[]): JsonReader<O>;
    getAsNumber(...key: (string | number)[]): number;
    getAsNumberWithDefault<T>(defaultValue: T, ...key: (string | number)[]): number | T;
    getAsNullableNumber(...key: (string | number)[]): number | null;
    getAsNullableNumberWithDefault<T>(defaultValue: T, ...key: (string | number)[]): number | null | T;
    getAsString(...key: (string | number)[]): string;
    getAsStringWithDefault<T>(defaultValue: T, ...key: (string | number)[]): string | T;
    getAsNullableString(...key: (string | number)[]): string | null;
    getAsNullableStringWithDefault<T>(defaultValue: T, ...key: (string | number)[]): string | null | T;
    getAsBoolean(...key: (string | number)[]): boolean;
    getAsBooleanWithDefault<T>(defaultValue: T, ...key: (string | number)[]): boolean | T;
    getAsNullableBoolean(...key: (string | number)[]): boolean | null;
    getAsNullableBooleanWithDefault<T>(defaultValue: T, ...key: (string | number)[]): boolean | null | T;
    getAsBigint(...key: (string | number)[]): O["allowBigint"] extends true ? bigint : never;
    getAsBigintWithDefault<T>(defaultValue: T, ...key: (string | number)[]): O["allowBigint"] extends true ? bigint | T : never;
    getAsNullableBigint(...key: (string | number)[]): O["allowBigint"] extends true ? bigint | null : never;
    getAsNullableBigintWithDefault<T>(defaultValue: T, ...key: (string | number)[]): O["allowBigint"] extends true ? bigint | null | T : never;
    getAsNumberOrBigint(...key: (string | number)[]): O["allowBigint"] extends true ? number | bigint : never;
    getAsNumberOrBigintWithDefault<T>(defaultValue: T, ...key: (string | number)[]): O["allowBigint"] extends true ? number | bigint | T : never;
    getAsNullableNumberOrBigint(...key: (string | number)[]): O["allowBigint"] extends true ? number | bigint | null : never;
    getAsNullableNumberOrBigintWithDefault<T>(defaultValue: T, ...key: (string | number)[]): O["allowBigint"] extends true ? number | bigint | null | T : never;
    getAsJsonObject(...key: (string | number)[]): FlexJsonObject<O>;
    getAsJsonObjectWithDefault<T>(defaultValue: T, ...key: (string | number)[]): FlexJsonObject<O> | T;
    getAsNullableJsonObject(...key: (string | number)[]): FlexJsonObject<O> | null;
    getAsNullableJsonObjectWithDefault<T>(defaultValue: T, ...key: (string | number)[]): FlexJsonObject<O> | null | T;
    getAsJsonArray(...key: (string | number)[]): FlexJsonArray<O>;
    getAsJsonArrayWithDefault<T>(defaultValue: T, ...key: (string | number)[]): FlexJsonArray<O> | T;
    getAsNullableJsonArray(...key: (string | number)[]): FlexJsonArray<O> | null;
    getAsNullableJsonArrayWithDefault<T>(defaultValue: T, ...key: (string | number)[]): FlexJsonArray<O> | null | T;
    mapEntry<T>(callback: (key: string | number, json: JsonReader<O>) => T): T[];
    mapArray<T>(callback: (key: number, json: JsonReader<O>) => T): T[];
    mapObject<T>(callback: (key: string, json: JsonReader<O>) => T): T[];
    findEntry(predicate: (key: string | number, json: JsonReader<O>) => boolean): [string | number, JsonReader<O>] | undefined;
    findArray(predicate: (key: number, json: JsonReader<O>) => boolean): [number, JsonReader<O>] | undefined;
    findObject(predicate: (key: string, json: JsonReader<O>) => boolean): [string, JsonReader<O>] | undefined;
    filterEntry(predicate: (key: string | number, json: JsonReader<O>) => boolean): [string | number, JsonReader<O>][];
    filterArray(predicate: (key: number, json: JsonReader<O>) => boolean): [number, JsonReader<O>][];
    filterObject(predicate: (key: string, json: JsonReader<O>) => boolean): [string, JsonReader<O>][];
    forEachEntry(callback: (key: string | number, json: JsonReader<O>) => void): void;
    forEachArray(callback: (key: number, json: JsonReader<O>) => void): void;
    forEachObject(callback: (key: string, json: JsonReader<O>) => void): void;
    has(...keys: (string | number)[]): boolean;
}
