import { FlexJsonElement, JsonOptions } from "./json_utils";
export declare abstract class JsonTransformer<O extends JsonOptions, F extends FlexJsonElement<O>, T extends FlexJsonElement<O>> {
    readonly jsonOptions: O;
    constructor(jsonOptions: O);
    abstract transform(value: F): T;
}
export type JsonTransformChainType<O extends JsonOptions, C extends JsonTransformer<O, FlexJsonElement<O>, FlexJsonElement<O>>[], I extends FlexJsonElement<O>> = C extends [] ? I : C extends [JsonTransformer<O, infer F, infer T>] ? F extends I ? T : never : C extends [JsonTransformer<O, infer F, infer T>, ...infer R extends (JsonTransformer<O, FlexJsonElement<O>, FlexJsonElement<O>>[] | never)] ? F extends I ? R extends never ? T : JsonTransformChainType<O, R, T> : never : never;
export declare class JsonTransformerChain<O extends JsonOptions, const C extends JsonTransformer<O, FlexJsonElement<O>, FlexJsonElement<O>>[], F extends (C[0] extends JsonTransformer<O, infer FROM, FlexJsonElement<O>> ? FROM : never), T extends JsonTransformChainType<O, C, FlexJsonElement<O>>> extends JsonTransformer<O, F, T> {
    readonly transformers: C;
    constructor(jsonOptions: O, transformers: C);
    transform(value: F): T;
}
