export type FlexJsonElement<O extends JsonOptions> = number | boolean | string | FlexJsonObject<O> | FlexJsonArray<O> | null | (JsonOptions["allowBigint"] extends true ? bigint : never);
type _FlexJsonObject<O extends JsonOptions, T extends FlexJsonElement<O>> = {
    [s: string]: T;
};
type _FlexJsonArray<O extends JsonOptions, T extends FlexJsonElement<O>> = T[];
export interface FlexJsonObject<O extends JsonOptions, T extends FlexJsonElement<O> = FlexJsonElement<O>> extends _FlexJsonObject<O, T> {
}
export interface FlexJsonArray<O extends JsonOptions, T extends FlexJsonElement<O> = FlexJsonElement<O>> extends _FlexJsonArray<O, T> {
}
export declare function isFlexJsonElement<O extends JsonOptions>(options: O, value: unknown): value is FlexJsonElement<O>;
export declare function isFlexJsonObject<O extends JsonOptions>(options: O, value: unknown): value is FlexJsonObject<O>;
export declare function isFlexJsonArray<O extends JsonOptions>(options: O, value: unknown): value is FlexJsonArray<O>;
export interface JsonOptions {
    allowBigint: boolean;
}
export declare const defaultJsonOptions: {
    readonly allowBigint: false;
};
export type JsonElement = FlexJsonElement<typeof defaultJsonOptions>;
export type JsonObject<T extends JsonElement = JsonElement> = FlexJsonObject<typeof defaultJsonOptions, T>;
export type JsonArray<T extends JsonElement = JsonElement> = FlexJsonArray<typeof defaultJsonOptions, T>;
export declare function isJsonObject(value: unknown): value is JsonObject;
export declare function isJsonArray(value: unknown): value is JsonArray;
export declare function isJsonElement(value: unknown): value is JsonElement;
export {};
