import { FlexJsonObject, JsonOptions } from "./json_utils";
export type UnionDiff<T, U> = T extends U ? never : T;
export type UnionXOR<T, U> = UnionDiff<T, U> | UnionDiff<U, T>;
export type UnionAND<T, U> = T extends U ? T : never;
export type PureObject = {
    [key: string]: unknown;
};
export type Merged<T, U> = {
    [P in UnionXOR<keyof T, keyof U>]: P extends keyof U ? U[P] : P extends keyof T ? T[P] : never;
} & {
    [P in UnionAND<keyof T, keyof U>]-?: MergeUndefinable<T[P], U[P]>;
};
export type MergeUndefinable<T, U> = U extends undefined ? T extends undefined ? undefined : T : T extends undefined ? U : U extends PureObject ? T extends PureObject ? Merged<T, U> : U : U;
export type PartialSome<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;
export type RequiredSome<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
/**
 * the type which will be M when merged with T
 * Merged<T, Complement<T, M>> = M
 */
export type Complement<T, M, ShowMatchedProps extends boolean = true> = {
    [P in UnionDiff<keyof M, keyof T>]: M[P];
} & {
    [P in UnionAND<keyof T, keyof M> as T[P] extends M[P] ? never : P]: T[P] extends PureObject ? M[P] extends PureObject ? Complement<T[P], M[P]> : M[P] : M[P];
} & (ShowMatchedProps extends true ? {
    [P in UnionAND<keyof T, keyof M> as T[P] extends M[P] ? P : never]?: M[P];
} : object);
/**
 * @param defaultOptions
 * @param options
 */
export declare function bindOptions<T extends PureObject, U extends PureObject>(defaultOptions: T, options: U): Merged<T, U>;
/**
 * @param obj
 */
export declare function isPureObject(obj: unknown): obj is PureObject;
/**
 * @param obj
 */
export declare function deepCopy<T>(obj: T): T;
/** Generates random uuid v4 */
export declare function generateUuid(): string;
/**
 * @param array
 * @param callback
 */
export declare function separateByValue<T>(array: T[], callback: (element: T) => string): {
    [s: string]: T[];
};
/**
 * @param obj
 * @param newKeys
 */
export declare function renameKeys<O extends JsonOptions>(obj: FlexJsonObject<O>, newKeys: {
    [from: string]: string;
}): any;
/**
 * @param dirFrom
 * @param dirTo
 */
export declare function move(dirFrom: string, dirTo: string): void;
/**
 * @param fileFrom
 * @param fileTo
 */
export declare function moveFile(fileFrom: string, fileTo: string): void;
