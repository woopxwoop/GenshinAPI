import EnkaProfile from "../structures/EnkaProfile";
import EnkaLibrary, { ExtractBuildType } from "./EnkaLibrary";
import EnkaGameAccount from "../structures/EnkaGameAccount";
import User from "../structures/User";
import CharacterBuild from "../structures/CharacterBuild";
/**
 * @typedef
 * @example
 * |hoyoType|Game Name|
 * |---|---|
 * |0|Genshin Impact|
 * |1|Honkai: Star Rail|
 */
export type HoyoType = 0 | 1;
/** @typedef */
export interface EnkaSystemOptions {
    enkaApiUrl: string;
    requestTimeout: number;
    userAgent: string;
}
/**  */
declare class EnkaSystem {
    /** Default EnkaSystem instance. */
    static readonly instance: EnkaSystem;
    /**  */
    static readonly enkaUrl: string;
    private readonly libraryMap;
    options: EnkaSystemOptions;
    /**
     * @param options
     */
    constructor(options?: Partial<EnkaSystemOptions>);
    /**
     * @param library
     */
    registerLibrary(library: EnkaLibrary<User, CharacterBuild>): void;
    /**
     * @param hoyoType
     */
    getLibrary(hoyoType: HoyoType): EnkaLibrary<User, CharacterBuild> | undefined;
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the Enka.Network account
     */
    fetchEnkaProfile(username: string): Promise<EnkaProfile>;
    /**
     * @param username enka.network username, not in-game nickname
     * @param allowedHoyoTypes hoyoTypes to filter
     * @returns the all game accounts added to the Enka.Network account
     */
    fetchEnkaGameAccounts(username: string, allowedHoyoTypes?: HoyoType[] | undefined): Promise<EnkaGameAccount<EnkaLibrary<User, CharacterBuild>>[]>;
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash the game account hash
     * @returns the game account added to the Enka.Network account
     */
    fetchEnkaGameAccount<T extends EnkaLibrary<User, CharacterBuild>>(username: string, hash: string): Promise<EnkaGameAccount<T>>;
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash the game account hash
     * @returns the game character builds including saved builds in the Enka.Network game account
     */
    fetchEnkaCharacterBuilds<T extends EnkaLibrary<User, CharacterBuild>>(username: string, hash: string): Promise<{
        [characterId: string]: ExtractBuildType<T>[];
    }>;
}
export default EnkaSystem;
