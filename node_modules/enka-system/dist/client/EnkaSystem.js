"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const EnkaNetworkError_1 = require("../errors/EnkaNetworkError");
const UserNotFoundError_1 = require("../errors/UserNotFoundError");
const EnkaProfile_1 = require("../structures/EnkaProfile");
const package_json_1 = require("../../package.json");
const axios_utils_1 = require("../utils/axios_utils");
const EnkaGameAccount_1 = require("../structures/EnkaGameAccount");
const config_file_js_1 = require("config_file.js");
const ts_utils_1 = require("../utils/ts_utils");
const getEnkaProfileUrl = (enkaUrl, username) => `${enkaUrl}/api/profile/${username}`;
/**  */
class EnkaSystem {
    /**
     * @param options
     */
    constructor(options = {}) {
        this.libraryMap = new Map();
        this.options = (0, config_file_js_1.bindOptions)({
            enkaApiUrl: "https://enka.network",
            requestTimeout: 3000,
            userAgent: `enka-system@${package_json_1.version}`,
        }, options);
    }
    /**
     * @param library
     */
    registerLibrary(library) {
        if (this.libraryMap.has(library.hoyoType))
            throw new Error(`Library for HoyoType ${library.hoyoType} is already registered. Create a new EnkaSystem instance to register multiple libraries for the same HoyoType.`);
        this.libraryMap.set(library.hoyoType, library);
    }
    /**
     * @param hoyoType
     */
    getLibrary(hoyoType) {
        return this.libraryMap.get(hoyoType);
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @returns the Enka.Network account
     */
    fetchEnkaProfile(username) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = getEnkaProfileUrl(this.options.enkaApiUrl, username) + "/";
            const response = yield (0, axios_utils_1.fetchJson)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 404:
                        throw new UserNotFoundError_1.default(`Enka.Network Profile with username ${username} was not found.`, response.status, response.statusText);
                    default:
                        throw new EnkaNetworkError_1.default(`Request to enka.network failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            const data = response.data;
            return new EnkaProfile_1.default(this, data);
        });
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param allowedHoyoTypes hoyoTypes to filter
     * @returns the all game accounts added to the Enka.Network account
     */
    fetchEnkaGameAccounts(username, allowedHoyoTypes = undefined) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${getEnkaProfileUrl(this.options.enkaApiUrl, username)}/hoyos/`;
            const response = yield (0, axios_utils_1.fetchJson)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 404:
                        throw new UserNotFoundError_1.default(`Enka.Network Profile with username ${username} was not found.`, response.status, response.statusText);
                    default:
                        throw new EnkaNetworkError_1.default(`Request to enka.network failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            const data = response.data;
            return Object.values(data).filter(u => !allowedHoyoTypes || allowedHoyoTypes.includes(u["hoyo_type"])).map(u => new EnkaGameAccount_1.default(this, u, username));
        });
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash the game account hash
     * @returns the game account added to the Enka.Network account
     */
    fetchEnkaGameAccount(username, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${getEnkaProfileUrl(this.options.enkaApiUrl, username)}/hoyos/${hash}/`;
            const response = yield (0, axios_utils_1.fetchJson)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 404:
                        throw new UserNotFoundError_1.default(`Enka.Network Profile with username ${username} or EnkaGameAccount with hash ${hash} was not found.`, response.status, response.statusText);
                    default:
                        throw new EnkaNetworkError_1.default(`Request to enka.network failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            const data = response.data;
            return new EnkaGameAccount_1.default(this, data, username);
        });
    }
    /**
     * @param username enka.network username, not in-game nickname
     * @param hash the game account hash
     * @returns the game character builds including saved builds in the Enka.Network game account
     */
    fetchEnkaCharacterBuilds(username, hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${getEnkaProfileUrl(this.options.enkaApiUrl, username)}/hoyos/${hash}/builds/`;
            const response = yield (0, axios_utils_1.fetchJson)(url, this, true);
            if (response.status !== 200) {
                switch (response.status) {
                    case 404:
                        throw new UserNotFoundError_1.default(`Enka.Network Profile with username ${username} or EnkaGameAccount with hash ${hash} was not found.`, response.status, response.statusText);
                    default:
                        throw new EnkaNetworkError_1.default(`Request to enka.network failed with unknown status code ${response.status} - ${response.statusText}\nRequest url: ${url}`, response.status, response.statusText);
                }
            }
            const json = new config_file_js_1.JsonReader(config_file_js_1.defaultJsonOptions, response.data);
            const entries = json.mapObject((charId, builds) => [charId, builds.mapArray((_, b) => {
                    const hoyoType = b.getAsNumber("hoyo_type");
                    const library = this.libraryMap.get(hoyoType);
                    if (!library)
                        return null;
                    return library.getCharacterBuild(b.getAsJsonObject(), username, hash);
                }).filter(ts_utils_1.nonNullable)]);
            return Object.fromEntries(entries.filter(entry => entry[1].length > 0));
        });
    }
}
/** Default EnkaSystem instance. */
EnkaSystem.instance = new EnkaSystem();
/**  */
EnkaSystem.enkaUrl = "https://enka.network";
exports.default = EnkaSystem;
