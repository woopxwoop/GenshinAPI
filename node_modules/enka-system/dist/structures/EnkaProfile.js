"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_file_js_1 = require("config_file.js");
const EnkaSystem_1 = require("../client/EnkaSystem");
/**
 * The Enka.Network account
 */
class EnkaProfile {
    /**
     * @param data
     * @param system
     */
    constructor(system, data) {
        this.system = system;
        this._data = data;
        const json = new config_file_js_1.JsonReader(config_file_js_1.defaultJsonOptions, this._data);
        this.username = json.getAsString("username");
        const profile = json.get("profile");
        this.bio = profile.getAsString("bio");
        this.avatar = profile.getAsNullableString("avatar");
        this.imageUrl = profile.getAsStringWithDefault(null, "image_url");
        this.level = profile.getAsNumber("level");
        this.url = `${EnkaSystem_1.default.enkaUrl}/u/${this.username}/`;
    }
    /**
     * @param allowedHoyoTypes hoyoTypes to filter
     * @returns the all game accounts added to the Enka.Network account
     */
    fetchGameAccounts(allowedHoyoTypes = undefined) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.system.fetchEnkaGameAccounts(this.username, allowedHoyoTypes);
        });
    }
    /**
     * @param hash the game account hash
     * @returns the game account added to the Enka.Network account
     */
    fetchGameAccount(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.system.fetchEnkaGameAccount(this.username, hash);
        });
    }
    /**
     * @param hash the game account hash
     * @returns the game character builds including saved builds in the Enka.Network game account
     */
    fetchBuilds(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.system.fetchEnkaCharacterBuilds(this.username, hash);
        });
    }
}
exports.default = EnkaProfile;
